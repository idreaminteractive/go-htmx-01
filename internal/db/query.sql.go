// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
insert into user (
  password, email, handle
) values (? , ?, ?) returning id, email, handle, password, created_at
`

type CreateUserParams struct {
	Password string
	Email    string
	Handle   string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Password, arg.Email, arg.Handle)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Handle,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, email, handle, password, created_at from user 
where email = ? limit 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Handle,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}
