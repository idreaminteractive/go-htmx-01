package views 

import (
	"strconv"
	"fmt"
	"github.com/go-ozzo/ozzo-validation/v4"
)

templ MessageCount( c int ) {
	<span>{ strconv.Itoa(c) }</span>
}

type ChatScreenProps struct {
	ActiveChatId          int // negative when not active
	PossibleConversations []PossibleConversationItemProps
	ActiveConversations   []ConversationItemProps
	CurrentMessages       []ChatMessageProps
}

templ ChatScreen (props ChatScreenProps) {
	<div class="grid h-screen w-full lg:grid-cols-[280px_1fr] bg-gradient-to-r from-black via-gray-800 to-black">
		<div class="hidden border-r bg-black/60 lg:block">
			<div class="flex flex-col gap-2">
				<div class="flex h-[60px] items-center px-6">
					<a href="/chat">
						<svg
 							xmlns="http://www.w3.org/2000/svg"
 							width="24"
 							height="24"
 							viewBox="0 0 24 24"
 							fill="none"
 							stroke="currentColor"
 							stroke-width="2"
 							stroke-linecap="round"
 							stroke-linejoin="round"
 							class=" h-6 w-6 text-white"
						>
							<path d="m3 21 1.9-5.7a8.5 8.5 0 1 1 3.8 3.8z"></path>
						</svg>
						<h2 class="ml-2 text-lg font-semibold text-white">Chat</h2>
					</a>
				</div>
				<div class="flex-1 overflow-auto">
					@ConversationList(ConversationListProps{
						Items: props.ActiveConversations,
						Possibles: props.PossibleConversations,
					})
				</div>
			</div>
		</div>
		@ChatActivity(ChatActivityProps{ActiveChatId: props.ActiveChatId, CurrentMessages: props.CurrentMessages})
		<div class="absolute bottom-4 left-4 lg:bottom-8 lg:left-8">
			<a href="/logout" class="btn btn-ghost inline-flex items-center justify-center text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input hover:bg-accent hover:text-accent-foreground h-10 py-2 px-4 rounded  text-white">
				Logout
			</a>
		</div>
	</div>
}

type ChatActivityProps struct {
	ActiveChatId    int
	CurrentMessages []ChatMessageProps
}

templ ChatActivity(props ChatActivityProps) {
	<div id="chatActivity" class="flex flex-col bg-black/60">
		if props.ActiveChatId < 0 {
			// present a selector
			<div class="flex justify-center items-center text-white">
				<h2 class="text-2xl">Select an active chat or user from the side to start chatting!</h2>
			</div>
		} else {
			@ChatMessageList(props.CurrentMessages)
			<div class="border-t p-4">
				<div class="flex items-start gap-2 pb-4 ">
					<button class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 w-10">
						<svg
 							xmlns="http://www.w3.org/2000/svg"
 							width="24"
 							height="24"
 							viewBox="0 0 24 24"
 							fill="none"
 							stroke="currentColor"
 							stroke-width="2"
 							stroke-linecap="round"
 							stroke-linejoin="round"
 							class=" w-4 h-4 text-white"
						>
							<circle cx="12" cy="12" r="10"></circle>
							<path d="M8 14s1.5 2 4 2 4-2 4-2"></path>
							<line x1="9" x2="9.01" y1="9" y2="9"></line>
							<line x1="15" x2="15.01" y1="9" y2="9"></line>
						</svg>
					</button>
					@ChatMessageForm(ChatMessageFormProps{ActiveChatId: props.ActiveChatId})
				</div>
			</div>
		}
	</div>
}

type ChatMessageFormProps struct {
	ActiveChatId    int
	PreviousMessage string
	Errors          validation.Errors
}

templ ChatMessageForm(props ChatMessageFormProps) {
	<span id="messageForm" class="w-full">
		<form class="w-full flex" method="post" action={ templ.URL(fmt.Sprintf("/chat/%d", props.ActiveChatId)) }>
			<input
 				name="message"
 				class={ "flex h-10 w-full rounded-md border border-input px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 flex-1 bg-gray-800 text-white", templ.KV("border-red-500", props.Errors != nil) }
 				placeholder="Type a message"
 				value={ props.PreviousMessage }
			/>
			<button type="submit" class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 w-10">
				<svg
 					xmlns="http://www.w3.org/2000/svg"
 					width="24"
 					height="24"
 					viewBox="0 0 24 24"
 					fill="none"
 					stroke="currentColor"
 					stroke-width="2"
 					stroke-linecap="round"
 					stroke-linejoin="round"
 					class="w-4 h-4 text-white"
				>
					<circle cx="12" cy="12" r="10"></circle>
					<path d="m16 12-4-4-4 4"></path>
					<path d="M12 16V8"></path>
				</svg>
			</button>
		</form>
		if props.Errors != nil {
			<p class="text-red-500 basis-full text-xs mt-1">{ props.Errors["message"].Error() }</p>
		}
	</span>
}

type ConversationListProps struct {
	Items     []ConversationItemProps
	Possibles []PossibleConversationItemProps
}

templ ConversationList(props ConversationListProps) {
	<div class="space-y-2 p-4">
		for _, item := range  props.Items {
			@ConversationItem(item)
		}
		for _, poss := range props.Possibles {
			@PossibleConversationItem(poss)
		}
	</div>
}

type ConversationItemProps struct {
	Id          int
	Handle      string
	MessageText string
}

templ ConversationItem(props ConversationItemProps, ) {
	// auto swap inner stuff to new page
	<a hx-target="#chatActivity" hx-push-url="true" hx-swap="outerHTML" hx-select="#chatActivity" hx-get={ fmt.Sprintf("/chat/%d", props.Id) } class="flex items-center p-2 gap-2 hover:bg-slate-800 transition duration-100">
		<img
 			src={ fmt.Sprintf("https://i.pravatar.cc/100?t=%d", props.Id) }
 			width="40"
 			height="40"
 			class="rounded-full"
 			alt="Contact"
 			style="aspect-ratio: 40 / 40; object-fit: cover;"
		/>
		<div>
			<h3 class="font-medium text-white">{ props.Handle }</h3>
			<p class="text-gray-400">{ props.MessageText }</p>
		</div>
	</a>
}

type PossibleConversationItemProps struct {
	Id     int
	Handle string
}

templ PossibleConversationItem(props PossibleConversationItemProps) {
	<form hx-post="/chat/new" class=" hover:bg-slate-800 transition duration-100">
		<button type="submit" class="flex items-center p-2 gap-2">
			<input type="hidden" name="userId" value={ fmt.Sprintf("%d", props.Id) }/>
			<img
 				src={ fmt.Sprintf("https://i.pravatar.cc/100?t=%d", props.Id) }
 				width="40"
 				height="40"
 				class="rounded-full"
 				alt="Contact"
 				style="aspect-ratio: 40 / 40; object-fit: cover;"
			/>
			<div>
				<h3 class="font-medium text-white">{ props.Handle }</h3>
				<p class="text-green-500">Chat now!</p>
			</div>
		</button>
	</form>
}

type ChatMessageProps struct {
	MessageText string
	Handle      string
	UserId      int
	IsOwn       bool
	TimeStamp   string
}

templ ChatMessage(props ChatMessageProps) {
	<div class={ "border rounded-lg p-2 mb-2 group text-white", templ.KV("ml-10 bg-gray-700", props.IsOwn), templ.KV("mr-10 bg-blue-500", !props.IsOwn) }>
		<p>{ props.Handle }: { props.MessageText }</p>
		<p class={ "text-xs", templ.KV("text-gray-400", props.IsOwn), templ.KV("text-gray-900", !props.IsOwn) }>{ props.TimeStamp }</p>
	</div>
}

templ ChatMessageList(messages []ChatMessageProps) {
	<div class="flex-1 overflow-auto p-4 ">
		for _, message := range messages {
			@ChatMessage(message)
		}
	</div>
}
