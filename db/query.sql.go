// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package todos

import (
	"context"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todo (
  description
) VALUES (
  ?
)
RETURNING id, status, description
`

func (q *Queries) CreateTodo(ctx context.Context, description string) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo, description)
	var i Todo
	err := row.Scan(&i.ID, &i.Status, &i.Description)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todo
WHERE id = ?
`

func (q *Queries) DeleteTodo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const getTodo = `-- name: GetTodo :one
SELECT id, status, description FROM todo
WHERE id = ? LIMIT 1
`

func (q *Queries) GetTodo(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodo, id)
	var i Todo
	err := row.Scan(&i.ID, &i.Status, &i.Description)
	return i, err
}

const listTodos = `-- name: ListTodos :many
SELECT id, status, description FROM todo
ORDER BY id
`

func (q *Queries) ListTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, listTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(&i.ID, &i.Status, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setTodoDone = `-- name: SetTodoDone :exec
update todo
set status = true 
where id = ?
`

func (q *Queries) SetTodoDone(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, setTodoDone, id)
	return err
}

const updateTodo = `-- name: UpdateTodo :exec
UPDATE todo
set description = ?
WHERE id = ?
`

type UpdateTodoParams struct {
	Description string
	ID          int64
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) error {
	_, err := q.db.ExecContext(ctx, updateTodo, arg.Description, arg.ID)
	return err
}
